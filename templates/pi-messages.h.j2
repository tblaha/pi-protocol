/* THIS FILE HAS BEEN AUTOGENERATED BY generate_header.py, DO NOT MODIFY */

#ifndef PI_MESSAGES_H
#define PI_MESSAGES_H

#include <stdint.h>

//--------------------------
// ------ MESSAGES ---------
//--------------------------

{% for msg in msgs %}
{% set piMsgDefine = "PI_MSG_"+msg.nameSNAKE_CAPS %}
{% set piMsgTypedef = "pi_"+msg.nameSNAKE_CAPS+"_t" %}
{% set piMsg = "piMsg"+msg.nameCamelCase %}
{% set piMsgA = piMsg+"A" %}
{% set piMsgB = piMsg+"B" %}
// ------ {{msg.nameSNAKE_CAPS}} ------
#define {{piMsgDefine}}_MODE PI_MSG_{{config.include_messages[msg.nameSNAKE_CAPS].mode}}

#define {{piMsgDefine}}_ID {{config.include_messages[msg.nameSNAKE_CAPS].id}}
#define {{piMsgDefine}}_PAYLOAD_LEN {{msg.payloadLen}}

// payload definition
typedef struct __{{piMsgTypedef}}
{
{% for field, dtype in msg.fields.items() %}
    {{dtype}} {{field}};
{% endfor %}
} __attribute__((packed)) {{piMsgTypedef}};

#if (PI_MODE & PI_RX) && ({{piMsgDefine}}_MODE & PI_MSG_RX)
{{piMsgTypedef}} {{piMsgA}};
{{piMsgTypedef}} {{piMsgB}};
{{piMsgTypedef}}* {{piMsg}} = NULL;
pi_msg_rx_state_t {{piMsg}}RxState = PI_MSG_RX_STATE_NONE;
#endif

//packing helper
#if (PI_MODE & PI_TX) && ({{piMsgDefine}}_MODE & PI_MSG_TX)
static inline int {{piMsg}}Pack(
    uint8_t * buf,
{% for field, dtype in msg.fields.items() %}
    {{dtype}} {{field}}
    {%- if not loop.last %},
    {% endif %}
{% endfor %}
)
{
    buf[0] = {{piMsgDefine}}_ID;

    {{piMsgTypedef}} payload;
{% for field, dtype in msg.fields.items() %}
    payload.{{field}} = {{field}};
{% endfor %}

    PI_PAYLOAD_TO_BUFFER(buf, payload, {{piMsgDefine}}_PAYLOAD_LEN);

    return PI_MSG_ID_LEN + {{piMsgDefine}}_PAYLOAD_LEN;
}
#endif // #if (PI_MODE & PI_TX) && ({{piMsgDefine}}_MODE & PI_MSG_TX)


{% endfor %}

#if (PI_MODE & PI_RX)

static inline uint8_t piParseIntoMsg(const uint8_t msgId, const uint8_t byte, const uint8_t byteCount) {
    static void * piMsgRxBuffer = NULL;

    if (msgId >= PI_MSG_MAX_ID)
        return PI_PARSE_MSG_INVALID_ID;

    if (byteCount >= (PI_MSG_MAX_PAYLOAD_LEN-1))
        return PI_PARSE_MSG_EXCEEDS_MAX_PAYLOAD_LEN;

    switch(msgId) {
{% for msg in msgs %}
{% set piMsgDefine = "PI_MSG_"+msg.nameSNAKE_CAPS %}
{% set piMsgTypedef = "pi_"+msg.nameSNAKE_CAPS+"_t" %}
{% set piMsg = "piMsg"+msg.nameCamelCase %}
{% set piMsgA = piMsg+"A" %}
{% set piMsgB = piMsg+"B" %}
#if ({{piMsgDefine}}_MODE & PI_MSG_RX)
        case {{piMsgDefine}}_ID:
            if (byteCount == 0) {
                piMsgRxBuffer = ({{piMsg}}RxState > PI_MSG_RX_STATE_A) ? &{{piMsgA}} : &{{piMsgB}};
            } else if (byteCount >= {{piMsgDefine}}_PAYLOAD_LEN) {
                return PI_PARSE_MSG_EXCEEDS_MSG_PAYLOAD_LEN;
            }

            if (piMsgRxBuffer) {
                *((uint8_t *)piMsgRxBuffer + byteCount) = byte;
            } else {
                return PI_PARSE_MSG_NULL_BUFFER;
            }

            if (byteCount == ({{piMsgDefine}}_PAYLOAD_LEN - 1)) {
                {{piMsg}}RxState = ({{piMsg}}RxState == PI_MSG_RX_STATE_A) ? PI_MSG_RX_STATE_B : PI_MSG_RX_STATE_A;
                {{piMsg}} = ({{piMsg}}RxState == PI_MSG_RX_STATE_A) ? &{{piMsgA}} : &{{piMsgB}};
            }
            break;
#endif // if ({{piMsgDefine}}_ID & PI_MSG_RX)
{% endfor %}
        default:
            return PI_PARSE_MSG_NO_SUCH_MSG;
    }

    return PI_PARSE_MSG_SUCCESS;
}

#endif // #if (PI_MODE & PI_RX)

#endif // #ifndef PI_MESSAGES_H

